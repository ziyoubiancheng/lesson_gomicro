// Code generated by go-bindata.
// sources:
// profiles.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _profilesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\xcf\x6e\x1b\x47\x0c\xc6\xef\x7e\x0a\x42\xa7\x16\x90\x02\xfd\xd9\xb5\xe5\xdc\x2c\xa7\x49\x0a\x54\x85\x11\x39\x2d\xda\xa2\x07\xee\x0c\xa5\x61\x3d\x9a\x51\x39\xdc\x28\x8b\x22\x40\x5f\xa3\xaf\xd7\x27\x29\x66\x25\xd7\xb2\x2d\xcb\xae\x4f\xae\x0f\x86\xb0\xc3\xe5\x72\xf9\xfd\xf6\x23\x7f\x39\x02\x00\xf8\xa3\xfd\x9f\xff\x3a\x6c\x3b\xaf\xa1\x33\xe8\x74\x6f\x2e\x05\x5c\x52\xbe\x78\xee\x79\xae\xf0\x3e\x2a\xf9\xdd\xe3\x95\x8b\x81\xbe\xaf\x97\x15\x49\x8e\xfa\xaa\x18\x94\x5f\xc3\xc9\x49\xd9\x2b\x4e\xfa\xfd\xdd\x40\x4b\xc9\x08\xaf\x94\x63\xc8\x81\x67\x70\xdc\x5b\x72\xa8\x95\x60\x8d\xfe\x0a\xe6\x12\x97\xf0\x31\x70\x0c\x30\xfb\xbd\x46\x21\xc0\x60\xa1\x80\x4d\x4c\xda\x9c\x23\x4c\xeb\xc0\x30\x25\x95\x08\x49\x31\x27\xeb\x82\x3a\x4e\xe0\xeb\xcf\xb5\x34\xe0\x72\x7d\x60\x29\xf1\x22\x90\x85\xaa\x81\x0b\xc7\x9e\x57\x2b\x82\x99\xa2\x98\x2b\x98\x13\x6a\x2d\x94\x00\x03\xa0\x68\x6a\x60\x5e\x4b\xe0\x7c\x0d\x4c\xf4\x9e\x4c\xce\x0a\x1c\x40\x1d\x81\x8f\x55\xd5\x74\x81\x83\xf1\xb5\xe5\xb0\x80\x75\x94\xab\x9c\x76\x86\xfe\x13\xda\x28\xf0\x06\x3d\xbf\xda\x7d\x51\xb4\x56\x28\xa5\xce\xeb\x9d\xc6\xb6\x07\x49\x85\x48\x6f\x7a\x55\x9c\x96\x3b\xf7\xed\x86\x6c\x5b\xfe\x8e\x50\x1a\x98\xe9\xdd\x28\xc3\xda\xe4\xf3\x19\x06\x78\x2b\x18\x0c\x27\x13\xef\xa7\x42\xdd\x08\x77\x76\xef\xfe\x58\x07\x95\x36\xc5\xc7\xc0\x4a\x36\xf7\x46\x29\xdd\x8d\x5b\xc5\xa4\xe8\xcf\xa3\x6d\xf3\x9c\x16\x83\xfe\xb0\xf3\x6f\xc4\x97\xf6\xd7\x97\xee\x7e\x84\x86\xfb\x10\xfa\x11\x1e\xaa\xf8\x21\x8c\x4e\x7a\xe5\xe8\x20\x46\xdf\x51\x4a\xa0\x2e\x6b\x09\x95\x8f\x66\x0b\x52\x96\xee\x27\x92\x0a\x61\x52\x53\x40\x38\xa7\xa0\x24\x30\x8f\xd2\x1e\x9d\x89\xa6\x2d\x37\x2a\x14\xec\x35\x37\x9c\x00\x61\x30\x3c\x0c\xe6\xf3\xc4\x1e\x8c\x07\x87\xc5\x1e\x89\x7d\x51\x52\x8f\x9e\x2a\xf5\x68\x9f\xd4\xad\x4f\xc0\xcf\xa4\x8a\x8f\xca\x5c\x16\xa3\xde\xb8\x2c\xcb\x83\x6e\x31\xba\x2f\x4a\x56\xf2\x22\xae\xc9\x7b\x98\xb5\xad\x04\x83\x95\xa7\x9e\x41\x01\xad\x25\xa0\xc4\x3a\xd8\xd6\x47\x26\x67\x1f\x2e\x41\x90\xfd\x1d\xd7\x70\xbc\xda\x4a\x7f\x7a\xdb\x69\x6e\x39\x91\x89\xcb\x8a\x03\xe5\xf0\x85\xeb\x29\x19\x07\x3e\xda\x45\x6b\x07\xac\x6e\x6b\x23\x1a\x6b\xe3\x28\x3d\x0f\x8f\xf2\x11\x2b\x28\xd5\xfd\x3f\xe9\x28\x1e\xa6\xe3\x07\x56\xf4\xf4\x28\x1e\xc3\x93\x71\x6f\x74\x78\x98\x5c\x66\x2d\xd7\xa8\x24\x73\x89\x41\xb7\x92\xb6\xda\x4c\xb0\x81\x89\xb0\x5d\x10\x7c\x62\x5a\xa7\xfc\x8d\x8f\x36\x56\x91\x6e\x30\x7a\xcb\x21\x77\x0f\x3d\xbc\xe1\xa4\xc2\x46\x5b\x6c\x10\x8a\xfd\xd8\xbd\x25\x91\x06\x26\x35\xfb\x3c\x14\x9e\x27\xf9\xf8\xb0\xe2\x53\x4e\xa9\x65\xf0\x05\xa9\x5e\x3e\x55\xf5\x72\x9f\xea\x17\x2e\x52\xe0\xcf\x4f\xde\x21\x8e\x7b\x83\xd1\xf8\xa0\xf9\x47\x83\xb9\xfc\xed\xac\xbe\xa4\x60\x49\x7c\xe4\x00\x81\x78\xe1\xaa\x28\x2e\x46\xdb\xcd\x9e\xde\xbf\xaf\x23\x3e\xe8\x0a\xd2\xee\x17\xcb\xa8\x51\xda\x0f\x9d\xc0\x61\x02\x17\x53\x7e\xd8\x12\x43\x03\x92\x27\xcd\xb2\x4e\x6c\x18\x43\x6a\x59\x89\xea\x48\xc0\x90\xa7\x4a\x58\x99\x12\x24\x0e\x86\xda\xca\x06\xa7\x65\x3f\xbd\x82\x6f\xf5\xef\x3f\xff\x4a\x0f\x53\xe5\x38\x69\x14\x36\xf0\x4e\x08\x15\xce\x96\x24\x6c\x30\xc0\x34\x3f\x08\xde\xa3\xf7\x10\x78\xe1\xd4\xf8\xba\x7a\x1e\x73\xc7\xfd\x47\xa6\xd0\x37\xd6\xbe\xac\x8d\xe3\xb4\x73\xf4\x44\xe6\x8e\xf7\x31\x77\xe9\xf2\xe2\xf7\x0a\x3e\xd0\x82\xd3\x7f\x5c\x3f\x86\xe3\xa2\x57\xf4\x0f\x1a\xcf\x4d\xea\x69\x9d\xa8\x5e\xc2\x65\x5c\x93\x6c\xf6\x88\x62\xd8\xcb\x72\x36\x5d\x28\xc6\x05\xcc\x15\xd2\x55\x93\x8c\xe0\x2a\x07\x6c\x88\x9d\xc5\x5a\x1d\xc4\x39\x4c\x51\xae\x48\xc1\x5e\x9b\x4f\x9c\xdf\xae\xb5\x0b\xe7\xe8\x79\x1e\x25\x30\x76\x01\xed\x6f\x68\x28\x28\x68\xbc\xb5\xe5\xbc\x43\xb1\x14\x52\x17\xa6\x31\x99\x18\x68\xbb\xf6\x74\xe1\x02\xcd\x24\x8f\xc9\x6b\xc3\x6a\x81\x6d\x0b\xd8\x7d\xc8\xf5\x3b\xe4\x7a\xa2\x25\x09\x79\x4f\x7a\xe6\xb6\x33\x7c\x64\x9e\x8d\xc4\xbe\x28\xc6\xee\x20\x76\xf4\xeb\xd1\x3f\x01\x00\x00\xff\xff\xf8\xbe\x11\x38\x1c\x0d\x00\x00")

func profilesJsonBytes() ([]byte, error) {
	return bindataRead(
		_profilesJson,
		"profiles.json",
	)
}

func profilesJson() (*asset, error) {
	bytes, err := profilesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profiles.json", size: 3356, mode: os.FileMode(493), modTime: time.Unix(1547100830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"profiles.json": profilesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"profiles.json": &bintree{profilesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
